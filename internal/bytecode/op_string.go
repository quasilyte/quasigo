// Code generated by "stringer -type=Op -trimprefix=Op"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpInvalid-0]
	_ = x[OpLoadScalarConst-1]
	_ = x[OpLoadStrConst-2]
	_ = x[OpZero-3]
	_ = x[OpMove-4]
	_ = x[OpMove8-5]
	_ = x[OpMoveResult2-6]
	_ = x[OpNot-7]
	_ = x[OpIsNil-8]
	_ = x[OpIsNotNil-9]
	_ = x[OpIsNilInterface-10]
	_ = x[OpIsNotNilInterface-11]
	_ = x[OpCap-12]
	_ = x[OpStrSlice-13]
	_ = x[OpStrSliceFrom-14]
	_ = x[OpStrSliceTo-15]
	_ = x[OpStrIndex-16]
	_ = x[OpSliceIndexScalar8-17]
	_ = x[OpSliceIndexScalar64-18]
	_ = x[OpBytesSlice-19]
	_ = x[OpBytesSliceFrom-20]
	_ = x[OpBytesSliceTo-21]
	_ = x[OpSliceSetScalar8-22]
	_ = x[OpSliceSetScalar64-23]
	_ = x[OpConcat-24]
	_ = x[OpStrEq-25]
	_ = x[OpStrNotEq-26]
	_ = x[OpStrGt-27]
	_ = x[OpStrLt-28]
	_ = x[OpIntNeg-29]
	_ = x[OpIntBitwiseNot-30]
	_ = x[OpScalarEq-31]
	_ = x[OpScalarNotEq-32]
	_ = x[OpIntGt-33]
	_ = x[OpIntGtEq-34]
	_ = x[OpIntLt-35]
	_ = x[OpIntLtEq-36]
	_ = x[OpIntAdd8-37]
	_ = x[OpIntAdd64-38]
	_ = x[OpIntSub8-39]
	_ = x[OpIntSub64-40]
	_ = x[OpIntMul8-41]
	_ = x[OpIntMul64-42]
	_ = x[OpIntDiv-43]
	_ = x[OpIntMod-44]
	_ = x[OpIntXor-45]
	_ = x[OpIntOr-46]
	_ = x[OpIntLshift-47]
	_ = x[OpIntRshift-48]
	_ = x[OpIntInc-49]
	_ = x[OpIntDec-50]
	_ = x[OpJump-51]
	_ = x[OpJumpZero-52]
	_ = x[OpJumpNotZero-53]
	_ = x[OpJumpTable-54]
	_ = x[OpCall-55]
	_ = x[OpCallRecur-56]
	_ = x[OpCallVoid-57]
	_ = x[OpCallNative-58]
	_ = x[OpCallVoidNative-59]
	_ = x[OpPushVariadicBoolArg-60]
	_ = x[OpPushVariadicScalarArg-61]
	_ = x[OpPushVariadicStrArg-62]
	_ = x[OpPushVariadicInterfaceArg-63]
	_ = x[OpVariadicReset-64]
	_ = x[OpReturnVoid-65]
	_ = x[OpReturnZero-66]
	_ = x[OpReturnOne-67]
	_ = x[OpReturnStr-68]
	_ = x[OpReturnScalar-69]
	_ = x[OpReturn-70]
	_ = x[OpFloatAdd64-71]
	_ = x[OpFloatSub64-72]
	_ = x[OpFloatMul64-73]
	_ = x[OpFloatDiv64-74]
	_ = x[OpFloatGt-75]
	_ = x[OpFloatGtEq-76]
	_ = x[OpFloatLt-77]
	_ = x[OpFloatLtEq-78]
	_ = x[OpFloatNeg-79]
	_ = x[OpConvIntToFloat-80]
}

const _Op_name = "InvalidLoadScalarConstLoadStrConstZeroMoveMove8MoveResult2NotIsNilIsNotNilIsNilInterfaceIsNotNilInterfaceCapStrSliceStrSliceFromStrSliceToStrIndexSliceIndexScalar8SliceIndexScalar64BytesSliceBytesSliceFromBytesSliceToSliceSetScalar8SliceSetScalar64ConcatStrEqStrNotEqStrGtStrLtIntNegIntBitwiseNotScalarEqScalarNotEqIntGtIntGtEqIntLtIntLtEqIntAdd8IntAdd64IntSub8IntSub64IntMul8IntMul64IntDivIntModIntXorIntOrIntLshiftIntRshiftIntIncIntDecJumpJumpZeroJumpNotZeroJumpTableCallCallRecurCallVoidCallNativeCallVoidNativePushVariadicBoolArgPushVariadicScalarArgPushVariadicStrArgPushVariadicInterfaceArgVariadicResetReturnVoidReturnZeroReturnOneReturnStrReturnScalarReturnFloatAdd64FloatSub64FloatMul64FloatDiv64FloatGtFloatGtEqFloatLtFloatLtEqFloatNegConvIntToFloat"

var _Op_index = [...]uint16{0, 7, 22, 34, 38, 42, 47, 58, 61, 66, 74, 88, 105, 108, 116, 128, 138, 146, 163, 181, 191, 205, 217, 232, 248, 254, 259, 267, 272, 277, 283, 296, 304, 315, 320, 327, 332, 339, 346, 354, 361, 369, 376, 384, 390, 396, 402, 407, 416, 425, 431, 437, 441, 449, 460, 469, 473, 482, 490, 500, 514, 533, 554, 572, 596, 609, 619, 629, 638, 647, 659, 665, 675, 685, 695, 705, 712, 721, 728, 737, 745, 759}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
